rm(Supplementary_Table_Cazalis_et_al_TREE)
View(df)
names(df)
table(df$Approach, df$Ambition)
table(df$realm[df$Ambition==2 & df$Approach=="Category predictive"])
table(df$realm[df$Ambition==1 & df$Approach=="Category predictive"])
360*prop.table(table(df$realm[df$Ambition==1 & df$Approach=="Category predictive"]))
238+3.4+13.6+9
6
6.8+7.3+3.49
40.8+13.6+9+6.8
70+264+18
72+18+266
library(readxl)
df <- read_excel("H:/Postdoc/Review/0.Redaction/TREE submission/Round 1 TREE/Supplementary Table Cazalis et al. TREE.xlsx")
library(plyr)
df$Ambition
table(df$Ambition)
df$newAmb<-revalue(as.character(df$Ambition), c("2 (Package)"="2", "2+3"="2", "3+4"="4"))
### Gives number of papers
table(df$newAmb, df$CriteriaExplicit)
### Gives number of papers
table(df$newAmb, df$Approach)
### Realms
table(df$realm)
df$CODE<-as.factor(paste(df$newAmb, df$CriteriaExplicit, sep="/"))
df$CODE<-as.factor(paste(df$newAmb, df$Approach, sep="/"))
df$realm<-replace(df$realm, df$realm=="NA", NA)
for(i in 1:nlevels(df$CODE)){
cat(paste("For ", levels(df$CODE)[i], "\n"))
print(360*round(prop.table(table(df$realm[df$CODE==levels(df$CODE)[i]])), 2))
cat("\n", "\n")
}
i=1
cat(paste("For ", levels(df$CODE)[i], "\n"))
v<-360*round(prop.table(table(df$realm[df$CODE==levels(df$CODE)[i]])), 2)
v
sum(2,3)
print("Terr:",
sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2),
"   Mar:",
sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2),
"   Fresh:",
sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2),
)
sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2)
sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2)
sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2)
print(cat("Terr:",
sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2),
"   Mar:",
sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2),
"   Fresh:",
sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2),
))
v<-360*prop.table(table(df$realm[df$CODE==levels(df$CODE)[i]]))
print("Terr:",
round(sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2),2),
"   Mar:",
round(sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2),2),
"   Fresh:",
round(sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2),2),
)
cat("Terr:",
round(sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2),2),
"   Mar:",
round(sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2),2),
"   Fresh:",
round(sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2),2),
)
print(paste("Terr:",
round(sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2),2),
"   Mar:",
round(sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2),2),
"   Fresh:",
round(sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2),2),
))
print(paste("Terr:",
round(sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2),2),
"   Mar:",
round(sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2),2),
"   Fresh:",
round(sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2),2)
))
263+70+26
for(i in 1:nlevels(df$CODE)){
cat(paste("For ", levels(df$CODE)[i], "\n"))
v<-360*prop.table(table(df$realm[df$CODE==levels(df$CODE)[i]]))
print(paste("Terr:",
round(sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2),2),
"   Mar:",
round(sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2),2),
"   Fresh:",
round(sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2),2)
))
cat("\n", "\n")
}
print(paste("Terr:",
round(sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2, na.rm=T),2),
"   Mar:",
round(sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2),2, na.rm=T),
"   Fresh:",
round(sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2, na.rm=T),2)
))
print(paste("Terr:",
round(sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2, na.rm=T),2),
"   Mar:",
round(sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2, na.rm=T),2),
"   Fresh:",
round(sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2, na.rm=T),2)
))
for(i in 1:nlevels(df$CODE)){
cat(paste("For ", levels(df$CODE)[i], "\n"))
v<-360*prop.table(table(df$realm[df$CODE==levels(df$CODE)[i]]))
print(paste("Terr:",
round(sum(v["All"]/3, v["Terrestrial"], v["Terrestrial + freshwater"]/2, v["Terrestrial + marine"]/2, na.rm=T),2),
"   Mar:",
round(sum(v["All"]/3, v["Marine"], v["Terrestrial + marine"]/2, v["Marine + freshwater"]/2, na.rm=T),2),
"   Fresh:",
round(sum(v["All"]/3, v["Freshwater"], v["Terrestrial + freshwater"]/2, v["Marine + freshwater"]/2, na.rm=T),2)
))
cat("\n", "\n")
}
table(df$Approach)
prop.table(table(df$Approach))
prop.table(table(df$Ambition))
54+6+6+1+11+7+15
### Covariates in category predictive
cat<-subset(df, df$Approach=="Category predictive" & df$Ambition != "2 (Package)")
prop.table(table(cat$Lhtraits))
prop.table(table(cat$RangeChar))
prop.table(table(cat$HumanPressure))
prop.table(table(cat$Conservation))
prop.table(table(cat$`Response variable`))
### Realms
table(df$realm)
### Realms
prop.table(table(df$realm))
4.3+5.4+1.08+2.17
prop.table(table(df$BroadTaxa))
1-0.01020408-0.07142857-0.02040816-0.06122449-0.01020408-0.01020408-0.01020408 -0.102-0.010
0.694/(1-0.06122449)
install.packages("microdemic")
library(microdemic)
ma_evaluate("Hirundo rustica")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("H:/Postdoc/Platform/Code example")
library(ggplot2) ; library(raster) ; library(dplyr) ; library(sf) ; library(rgdal) ; library(plyr) ; library(ncdf4) ; library(ggalluvial)
distributions_sub<-read_sf("Data/Intermediate/distributions examples.shp")
distributions_sub<-distributions_sub %>% dplyr::group_by(SCINAME) %>% dplyr::summarise(N= n())
cci2<-raster("Data/Input/ESA-CCI/C3S-LC-L4-LCCS-Map-300m-P1Y-2020-v2.1.1.nc")
hab.pref<-read.csv("Data/Input/BL_Habitats_2019.sentbyStu26_02_2020.csv", sep=";")
hab.pref<-read.csv("Data/Input/BL_Habitats_2019.sentbyStu26_02_2020.csv", sep=";")
species<-readRDS("H:/Postdoc/Threat analysis/Scripts/Search.merged.Total.feb21.rds")
density<-read.csv("Data/Input/Density.table.csv", sep=",") ; names(density)[1]<-"Species"
crosswalk<-read.csv("Data/ConversionTable_IUCN_ESA_Lev2_piero.csv")
cci_classes<-data.frame(Classes=c(levels(as.factor(crosswalk$esa_code)), 220))
options(width=150)
crosswalk$species_pref<-as.numeric(crosswalk$iucn_habitat %in% hab.pref$Habitats.level.2[hab.pref$Scientific.name ==SP])
SP<-"Nesoenas mayeri"
range_WGS<-distributions_sub[distributions_sub$SCINAME==SP,]
range<-st_transform(range_WGS, crs(alt))
alt<-raster("Data/Input/GLOBEelevation/GLOBE_projected_Moll.tif")
range<-st_transform(range_WGS, crs(alt))
crosswalk$species_pref<-as.numeric(crosswalk$iucn_habitat %in% hab.pref$Habitats.level.2[hab.pref$Scientific.name ==SP])
pref_tab<-as.data.frame(table(crosswalk$iucn_habitat, crosswalk$species_pref==1))
names(pref_tab)[1]<-"Habitat"
pref_tab<-pref_tab[pref_tab$Var2==TRUE,]
pref_tab$Suitable<-as.numeric(pref_tab$Freq>0)
print(pref_tab[,c("Habitat", "Suitable")], right=F)
cci_classes$SP<-cci_classes$Classes %in% crosswalk$esa_code[crosswalk$species_pref == 1] %>% as.numeric(.)
cci_classes$Classes<-as.numeric(as.character(cci_classes$Classes)) ; cci_classes$SP<-as.numeric(as.character(cci_classes$SP))
cci2_sp<-crop(cci2, extent(range_WGS))
cci2_sp<-crop(cci2, extent(range_WGS))
cci2_sp<-reclassify(cci2_sp, as.matrix(cci_classes))
plot(cci2_sp)
writeRaster(cci2_sp, "H:/Test.for.Alessandra.tif")
library(raster)
ras<-raster("H:/Test.for.Alessandra.tif")
install.packages("changeRangeR")
remotes::install_github("andrepazv/changeRangeR")
install.packages("remotes")
library(adrepazv/changeRangeR)
remotes::install_github("andrepazv/changeRangeR")# Just once to install the package
ras_pts<-rasterToPoints(ras, spatial = TRUE)
plot(ras_pts)
ras_pts<-subset(ras_pts, ras_pts$Test.for.Alessandra==1)
plot(ras_pts)
plot(ras)
plot(ras_pts, add=T)
plot(ras_pts, add=T, pch=1, cex=0.1)
plot(ras)
plot(ras_pts, add=T, pch=1, cex=0.1)
plot(chull(ras_pts))
mcp<-rgeos::gConvexHull(ras_pts)
plot(mcp)
plot(ras) ; plot(mcp, add=T)  # This is your MCP
help(writeOGR)
library(rgdal)
writeOGR(mcp, "H:/MCP_test.shp")
writeOGR(mcp, "H:/MCP_test", driver="ESRI Shapefile")
class(mcp)
shapefile(x = mcp, file = "H:/MCP_test.shp")
chlist=read.csv("H:/chlist.server.csv")
library(chngpt)
M4<-chngptm(formula.1=Residus ~ 1, formula.2= ~hfp, chlist, type="segmented", family="gaussian")
M4_NB<-chngptm(formula.1=Residus_NB ~ 1, formula.2= ~hfp, chlist, type="segmented", family="gaussian")*
names(chlist)
M4_NB<-chngptm(formula.1=Residus_NB ~ 1, formula.2= ~hfp, chlist, type="segmented", family="gaussian")
summary(M4)
summary(M4_NB)
DF<-data.frame(hfp=seq(0,50,0.5), Rich1=NA, Rich2=NA, Rich3=NA, ForDep=NA, Endem=NA, Threat=NA, duration=median(chlist$duration, na.rm=T), alt=median(chlist$alt, na.rm=T), alt2=median(chlist$alt, na.rm=T)^2, npp=median(chlist$npp, na.rm=T), npp2=median(chlist$npp, na.rm=T)^2, day=median(chlist$day, na.rm=T), obsKelling=median(chlist$obsKelling, na.rm=T), year=median(chlist$year, na.rm=T), N_obs=median(chlist$N_obs, na.rm=T), htsp="ATL")
DF$hfp2<-DF$hfp^2
DF$Rich0<-predict(M0, newdata=DF, type="response")
plot(M4_NB)
plot(M4_NB)
gam.check(M4_NB)
quantile(chlist$hfp, 0.95)
quantile(chlist$hfp, 0.9)
summary(M4_NBù)
summary(M4_NB)
summary(M4)
M4$best.fit
M0<-gam(rich ~ alt + alt2 + npp + npp2 + s(day)+ s(duration, k=4) + s(obsKelling, k=4) + year + s(N_obs, k=4) + htsp, data=chlist, family="poisson")
library(mgcv)
M0<-gam(rich ~ alt + alt2 + npp + npp2 + s(day)+ s(duration, k=4) + s(obsKelling, k=4) + year + s(N_obs, k=4) + htsp, data=chlist, family="poisson")
### Footprint model on residuals
chlist$Residus<-residuals(M0)
M4<-chngptm(formula.1=Residus ~ 1, formula.2= ~hfp, chlist, type="segmented", family="gaussian")
summary(M4)
beepr::beep(3)
gam.check(M4)
gam.check(M0)
gam.check(M0)
gam.check(M0)[1]
list.files("H:/Postdoc/Data sufficiency/1.Analyses/0.Data/SIS")
birds=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/0.Data/SIS/2.SISConnect/Bird/allfields.csv")
table(table(birds$internal_taxon_name))
View(birds)
head(birds)
table(is.na(birds$EOO.range))
table((birds$EOO.range)=="")
birds=replace(birds, birds=="", NA)
table(is.na(birds$EOO.range))
mamm=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/0.Data/SIS/2.SISConnect/Mammal/allfields.csv")
mamm=replace(mamm, mamm=="", NA)
amph=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/0.Data/SIS/2.SISConnect/Amphibian/allfields.csv")
amph=replace(amph, amph=="", NA)
birds$Vgroup="Bird"
mamm$Vgroup="Mammal"
amph$Vgroup="Amphibian"
species=rbind(birds, mamm, amph)
table(species$Vgroup)
tokeep=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/1.Tables/Species.characteristics.datasufficiency.Script1a.csv")
tokeep$assessmentid_V
tokeep=subset(tokeep[tokeep$Vgroup %in% c("Bird", "Amphibian", "Mammal")])
tokeep=subset(tokeep[tokeep$Vgroup %in% c("Bird", "Amphibian", "Mammal"),])
table(tokeep$assessmentid_V %in% species$assessment_id)
species=subset(species, species$assessment_id %in% tokeep$assessmentid_V)
table(table(species$internal_taxon_name))
rm(amph, tokeep, birds, mamm)
### Plot
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)))
### Plot
library(ggplot2)
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)))
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)), stat="identity")
species$Vgroup=factor(species$Vgroup, c("Bird", "Mammal", "Amphibian"))
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)), stat="identity")
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)))+
scale_fill_manual(values=c("#b8e186", "#f1b6da"))
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)))+
scale_fill_manual(values=c("#4dac26", "#d01c8b"))
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#d01c8b"))
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#d01c8b"))+
ggtitle("EOO")
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#f1b6da", "#d01c8b"))+
ggtitle("EOO")
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("EOO")
names(species)
ggplot(species)+
geom_bar(aes(x=Vgroup, fill=is.na(AOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("AOO")
table(is.na(species$AOO.range))
tokeep=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/1.Tables/Species.characteristics.datasufficiency.Script1a.csv")
species$category=tokeep$category[match(species$internal_taxon_id, tokeep$taxonid)]
table(species$category)
table(is.na(species$category))
rm(amph, tokeep, birds, mamm)
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("EOO")
species=subset(species, species$category %in% c("LC", "NT", "VU", "EN", "CR", "DD"))
species$category=factor(species$Vgroup, c("LC", "NT", "VU", "EN", "CR", "DD"))
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("EOO")+
facet_wrap(~Vgroup, nrow=3)
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("EOO")+
facet_wrap(~Vgroup, nrow=1)
birds=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/0.Data/SIS/2.SISConnect/Bird/allfields.csv")
birds=replace(birds, birds=="", NA)
birds$Vgroup="Bird"
mamm=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/0.Data/SIS/2.SISConnect/Mammal/allfields.csv")
mamm=replace(mamm, mamm=="", NA)
mamm$Vgroup="Mammal"
amph=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/0.Data/SIS/2.SISConnect/Amphibian/allfields.csv")
amph=replace(amph, amph=="", NA)
amph$Vgroup="Amphibian"
species=rbind(birds, mamm, amph)
tokeep=read.csv("H:/Postdoc/Data sufficiency/1.Analyses/1.Tables/Species.characteristics.datasufficiency.Script1a.csv")
species=subset(species, species$assessment_id %in% tokeep$assessmentid_V)
species$category=tokeep$category[match(species$internal_taxon_id, tokeep$taxonid)]
table(table(species$internal_taxon_name))
### Plot
library(ggplot2)
species$Vgroup=factor(species$Vgroup, c("Bird", "Mammal", "Amphibian"))
species=subset(species, species$category %in% c("LC", "NT", "VU", "EN", "CR", "DD"))
species$category=factor(species$category, c("LC", "NT", "VU", "EN", "CR", "DD"))
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("EOO")+
facet_wrap(~Vgroup, nrow=1)
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(AOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("AOO")+
facet_wrap(~Vgroup, nrow=1)
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationReductionPast.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Past population reduction (A2)")+
facet_wrap(~Vgroup, nrow=1)
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationReductionFuture.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Future population reduction (A3)")+
facet_wrap(~Vgroup, nrow=1)
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationSize.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Population size (C-D)")+
facet_wrap(~Vgroup, nrow=1)
species[species$internal_taxon_name=="Sypheotides indicus"]
species[species$internal_taxon_name=="Sypheotides indicus",]
species[species$internal_taxon_name=="Meles meles",]
species[species$internal_taxon_name=="Eleutherodactylus bakeri",]
gridExtra::grid.arrange(
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("EOO (B1)")+
facet_wrap(~Vgroup, nrow=1),
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(AOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("AOO (B2)")+
facet_wrap(~Vgroup, nrow=1),
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationReductionPast.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Past population reduction (A2)")+
facet_wrap(~Vgroup, nrow=1),
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationReductionFuture.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Future population reduction (A3)")+
facet_wrap(~Vgroup, nrow=1),
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationSize.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Population size (C-D)")+
facet_wrap(~Vgroup, nrow=1),
ncol=1)
G=gridExtra::grid.arrange(
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(EOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("EOO (B1)")+
facet_wrap(~Vgroup, nrow=1),
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(AOO.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("AOO (B2)")+
facet_wrap(~Vgroup, nrow=1),
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationReductionPast.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Past population reduction (A2)")+
facet_wrap(~Vgroup, nrow=1),
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationReductionFuture.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Future population reduction (A3)")+
facet_wrap(~Vgroup, nrow=1),
ggplot(species)+
geom_bar(aes(x=category, fill=is.na(PopulationSize.range)), show.legend=F)+
scale_fill_manual(values=c("#4dac26", "#f1b6da"))+
ggtitle("Population size (C-D)")+
facet_wrap(~Vgroup, nrow=1),
ncol=1)
library(cowplot)
help(save_plot)
cowplot::save_plot(G, "H:/Postdoc/Test.plot.Etienne.png", base_height=10, base_width=5 )
cowplot::save_plot("H:/Postdoc/Test.plot.Etienne.png", G, base_height=10, base_width=5 )
species[species$internal_taxon_name=="Atelopus ignescens",]
remotes::install_github("prioritizr/aoh", auth_token="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")
remotes::install_github("prioritizr/aoh", auth_token="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")
library(aoh)
help("create_spp_aoh_data")
create_spp_aoh_data()
create_spp_aoh_data
library(rgbif)
sp="Papilio sosia"
dat <- rgbif::occ_search(scientificName = sp, hasCoordinate = T, limit=10000)$data # nolint
hist(dat$year)
sp="Turdus merula"
dat <- rgbif::occ_search(scientificName = sp, hasCoordinate = T, limit=10000)$data # nolint
dat1=dat; rm(dat)
setwd("C:/Victor_local/GeoGuessR")
### Required libraries
library(devtools)
library(ggplot2)
library(dplyr)
library(plyr)
library(stringi)
library(sf)
library(gridExtra)
#install_github("baptiste/ggflags")
library(ggflags)
#install.packages("CoordinateCleaner")
library(CoordinateCleaner)
### Call hidden functions (e.g. to store results, to clean names...)
source("GGR_Hidden_functions.R")
### Call guess functions
source("GGR_capitals.R")
source("GGR_countries_shape.R")
source("GGR_countries_localisation.R")
source("GGR_flags.R")
source("GGR_RandomGame.R")
### Call plot results function
source("GGR_plot_results.R")
GGR_capitals()
GGR_capitals()
GGR_capitals()
GGR_capitals()
GGR_capitals()
GGR_capitals()
### TO PLAY
# Either call one of these functions to play a specific game
GGR_flags()
### TO PLAY
# Either call one of these functions to play a specific game
GGR_flags()
GGR_countries_shape()
GGR_countries_shape()
GGR_countries_shape()
GGR_countries_localisation()
GGR_countries_localisation()
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Check your results
GGR_plot_results()
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
### TO PLAY
# Either call one of these functions to play a specific game
GGR_flags()
GGR_capitals()
GGR_countries_localisation()
# Check your results
GGR_plot_results()

help(rf.modelSel)
??rf.modelSel
library(randomForest)
help(rf.modelSel)
??rf.modelSel
help(varImpPlot)
Group="FW_ODONATA"
eval(parse("2+2"))
eval(parse(text="2+2"))
a="paste('a', 'b')
)
eval(parse(text=a))
a="paste('a', 'b')"
eval(parse(text=a))
??partial
library(randomForest)
### Create set of variables (general + terrestrial / marine)
# Removed because of correlation: res.cap and corruption (with GDP), acc_med (with acc_Q10)
VARS<-c(
"nb_GBIFgeoMOD",
"time_descMOD",
"N.hab1",
"med_GDP",
"conflictMEANYEAR",
"range_magnitude",
"Sampling_MED", "gbifSP_propemptyMOD",
"DDness", "N_DDs",
"N_synonyms",
"WOSMOD",
"zoos",
"taxo"
)
VARS<-c(VARS,
"realmsTERR_mode",
"acc_terrMED",
"roadsQ90",
"hpop", "rur.prop",
"alt_med"
)
VARS<-c(VARS, "trait_availability_mammals", "bodymass_mammals", "nocturnal_mammals", "RLA")
VARS
paste(VARS, collapse="+")
paste(VARS, collapse=" ")
WD<-getwd()
setwd("H:/R pratique/GeoGuessR")
### Required libraries
library(devtools)
library(ggplot2)
library(dplyr)
library(plyr)
library(stringi)
library(sf)
library(gridExtra)
#install_github("baptiste/ggflags")
library(ggflags)
#install.packages("CoordinateCleaner")
library(CoordinateCleaner)
### Call hidden functions (e.g. to store results, to clean names...)
source("GGR_Hidden_functions.R")
### Call guess functions
source("GGR_capitals.R")
source("GGR_countries_shape.R")
source("GGR_countries_localisation.R")
source("GGR_flags.R")
source("GGR_RandomGame.R")
### Call plot results function
source("GGR_plot_results.R")
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
WD<-getwd()
setwd("H:/R pratique/GeoGuessR")
### Required libraries
library(devtools)
library(ggplot2)
library(dplyr)
library(plyr)
library(stringi)
library(sf)
library(gridExtra)
#install_github("baptiste/ggflags")
library(ggflags)
#install.packages("CoordinateCleaner")
library(CoordinateCleaner)
### Call hidden functions (e.g. to store results, to clean names...)
source("GGR_Hidden_functions.R")
### Call guess functions
source("GGR_capitals.R")
source("GGR_countries_shape.R")
source("GGR_countries_localisation.R")
source("GGR_flags.R")
source("GGR_RandomGame.R")
### Call plot results function
source("GGR_plot_results.R")
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_plot_results()
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
setwd("C:/Victor_local/GeoGuessR")
setwd("C:/Victor_local/GeoGuessR")
### Required libraries
library(devtools)
library(ggplot2)
library(dplyr)
library(plyr)
library(stringi)
library(sf)
library(gridExtra)
#install_github("baptiste/ggflags")
library(ggflags)
#install.packages("CoordinateCleaner")
library(CoordinateCleaner)
### Call hidden functions (e.g. to store results, to clean names...)
source("GGR_Hidden_functions.R")
### Call guess functions
source("GGR_capitals.R")
source("GGR_countries_shape.R")
source("GGR_countries_localisation.R")
source("GGR_flags.R")
source("GGR_RandomGame.R")
GGR_flags()
GGR_flags()
GGR_flags()
GGR_flags()
GGR_flags()
GGR_flags()
GGR_countries_localisation()
GGR_countries_shape()
GGR_countries_shape()
GGR_countries_shape()
GGR_countries_shape()
GGR_countries_shape()
GGR_capitals
GGR_capitals()
GGR_capitals()
GGR_capitals()
GGR_capitals()
GGR_capitals()
GGR_capitals()
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
# Check your results
GGR_plot_results()
### Call plot results function
source("GGR_plot_results.R")
# Check your results
GGR_plot_results()
# Find the path to store results in config
config <- config::get()
help(get)
# Find the path to store results in config
config <- config::get()
config <- config::get()
list.files()
# Find the path to store results in config
config <- config::get()
# Find the path to store results in config
folder_results<-"C:/Victor_local"
### Call hidden functions (e.g. to store results, to clean names...)
source("GGR_Hidden_functions.R")
### Call guess functions
source("GGR_capitals.R")
source("GGR_countries_shape.R")
source("GGR_countries_localisation.R")
source("GGR_flags.R")
source("GGR_RandomGame.R")
# Find the path to store results in config
folder_results<-"C:/Victor_local"
# Or call this function to play all games (or select the ones you want to play)
GGR_RandomGame(GAMES=c("flags", "capitals", "countries_shape", "countries_localisation"))
